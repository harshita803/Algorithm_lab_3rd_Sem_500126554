#include <stdio.h>


int knapsack(int W, int weights[], int values[], int n) {
    
    int dp[n + 1][W + 1];

    
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;  
            } else if (weights[i - 1] <= w) {
                
                dp[i][w] = (values[i - 1] + dp[i - 1][w - weights[i - 1]]) > dp[i - 1][w] 
                            ? (values[i - 1] + dp[i - 1][w - weights[i - 1]]) 
                            : dp[i - 1][w];
            } else {

                dp[i][w] = dp[i - 1][w];
            }
        }
    }

   
    return dp[n][W];
}

int main() {
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int W = 50;  
    int n = sizeof(values) / sizeof(values[0]);

    int maxValue = knapsack(W, weights, values, n);
    printf("Maximum value in Knapsack = %d\n", maxValue);

    return 0;
}
